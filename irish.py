# -*- coding: utf-8 -*-
"""Irish.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Vtw3PZIjovCbfEuwhIs0z4oWBlRmARB
"""

from sklearn.datasets import load_iris
import numpy as np
import torch
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from torch import nn
import torch.optim as optim
from torchmetrics.classification import MulticlassAccuracy, MulticlassF1Score

device = "cuda" if torch.cuda.is_available() else "cpu"

data = load_iris()

X, y = data.data, data.target

print(X.shape)
print(y.shape)

## Normalize Data
from sklearn.preprocessing import StandardScaler
scalar = StandardScaler()
X = scalar.fit_transform(X)

## convert data to tensor

X = torch.from_numpy(X).type(torch.float)
y = torch.from_numpy(y).type(torch.LongTensor)

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.title("X1,X2")
plt.scatter(X[:,0], X[:,1],c=y)
plt.subplot(1,2,2)
plt.title("X3,X4")
plt.scatter(X[:,2], X[:,3],c=y);

X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    test_size=0.2,
                                                    random_state=42,
                                                    stratify=y)

class MultiClassV0(nn.Module):
  def __init__(self) :
    super().__init__()
    self.layers = nn.Sequential(
        nn.Linear(in_features=4, out_features=8),
        nn.ReLU(),
        nn.Linear(in_features=8, out_features=8),
        nn.ReLU(),
        nn.Linear(in_features=8, out_features=3)
    )

  def forward(self, x):
    return self.layers(x)

irish_model = MultiClassV0().to(device)

irish_model.state_dict()

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(params= irish_model.parameters(),
                            lr=0.1)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=1000, gamma=0.5)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=10)

acc_fn = MulticlassAccuracy(num_classes=3).to(device)
f1_fn =MulticlassF1Score(num_classes=3).to(device)

torch.manual_seed(42)
torch.cuda.manual_seed(42)
X_train, X_test = X_train.to(device), X_test.to(device)
y_train, y_test =  y_train.to(device), y_test.to(device)
epochs = 501
print(X_train.device)

for epoch in range(epochs):
  irish_model.train() # Set the model to training mode
  # Forward pass
  y_logits = irish_model(X_train)
  y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)
  train_accuracy = acc_fn(y_pred, y_train)
  train_f1 = f1_fn(y_pred, y_train)
  # Compute loss
  loss = loss_fn(y_logits, y_train)

  # Backward pass
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

  # Evaluation mode
  irish_model.eval()
  with torch.inference_mode(): # Disable gradient calculations during inference
    test_logit = irish_model(X_test)
    test_pred = torch.softmax(test_logit, dim=1).argmax(dim=1)
    test_loss = loss_fn(test_logit, y_test)
  # Step the scheduler based on the test loss
  scheduler.step(test_loss)
  test_accuracy = acc_fn(test_pred, y_test)
  # Print loss every 100 epochs
  if epoch % 50 == 0 :
    print(f" Epoch: {epoch}, Loss: {loss:0.5f}, Train_Acc: {train_accuracy*100:0.2f}% ,Train_F1: {train_f1*100:0.2f},Test_Loss: {test_loss:0.5f}, Test_Acc: {test_accuracy*100:0.2f}% ")

device

## import some helpful scripts
import requests
from pathlib import Path
if Path("helper_functions.py").is_file():
  print("helper_functions.py already exists, skipping download")
else:
  request = requests.get("https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/main/helper_functions.py")
  with open ("helper_functions.py", "wb") as f:
    f.write(request.content)
from helper_functions import plot_predictions, plot_decision_boundary

from sklearn.metrics import classification_report
with torch.inference_mode():
    test_logit = irish_model(X_test)
    test_pred = torch.softmax(test_logit, dim=1).argmax(dim=1)
    test_loss = loss_fn(test_logit, y_test)
# Print classification report
print(classification_report(test_pred, y_test, target_names=['Class 0', 'Class 1', 'Class 2']))

torch.save(irish_model.state_dict(), 'irish_model.pth')